{"ast":null,"code":"/**\r\n * API utilities for Smart Fridge Dashboard\r\n */\n\n// API base URL - change to actual backend URL in production\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : '/mock.json';\n\n/**\r\n * Fetches the current fridge status from the API\r\n * @returns {Promise<Object>} The fridge status data\r\n */\nexport const fetchFridgeStatus = async () => {\n  try {\n    // In development, we'll use the mock data\n    if (process.env.NODE_ENV !== 'production') {\n      const response = await fetch(API_BASE_URL);\n      return await response.json();\n    }\n\n    // In production, use the actual API endpoint\n    const response = await fetch(`${API_BASE_URL}/fridge-status`);\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching fridge status:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","NODE_ENV","fetchFridgeStatus","response","fetch","json","ok","Error","status","error","console"],"sources":["C:/Users/adhiman/WORK/raspberrypi/frontend/src/utils/api.js"],"sourcesContent":["/**\r\n * API utilities for Smart Fridge Dashboard\r\n */\r\n\r\n// API base URL - change to actual backend URL in production\r\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? '/api' \r\n  : '/mock.json';\r\n\r\n/**\r\n * Fetches the current fridge status from the API\r\n * @returns {Promise<Object>} The fridge status data\r\n */\r\nexport const fetchFridgeStatus = async () => {\r\n  try {\r\n    // In development, we'll use the mock data\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      const response = await fetch(API_BASE_URL);\r\n      return await response.json();\r\n    }\r\n\r\n    // In production, use the actual API endpoint\r\n    const response = await fetch(`${API_BASE_URL}/fridge-status`);\r\n    if (!response.ok) {\r\n      throw new Error(`API error: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching fridge status:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACtD,MAAM,GACN,YAAY;;AAEhB;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF;IACA,IAAIH,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACN,YAAY,CAAC;MAC1C,OAAO,MAAMK,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC9B;;IAEA;IACA,MAAMF,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,gBAAgB,CAAC;IAC7D,IAAI,CAACK,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,cAAcJ,QAAQ,CAACK,MAAM,EAAE,CAAC;IAClD;IACA,OAAO,MAAML,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}